// mx.mfpp.beneficioapp.model.ServicioRemotoJovenesPromocion
package mx.mfpp.beneficioapp.model

import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory
import kotlinx.coroutines.delay

/**
 * Objeto (Singleton) que gestiona la comunicaci√≥n con la API remota
 * (Cloud Function) para obtener la lista de promociones para j√≥venes.
 *
 * Este servicio se encarga de:
 * 1. Configurar Retrofit para el endpoint espec√≠fico [URL_BASE].
 * 2. Implementar una l√≥gica de paginaci√≥n para descargar *todas* las promociones,
 * no solo una p√°gina.
 * 3. Implementar un mecanismo de reintentos ([MAX_REINTENTOS]) con backoff simple
 * para manejar fallos de red temporales.
 */
object ServicioRemotoJovenesPromocion {
    /** URL base del servicio (Cloud Function) para listar promociones. */
    private const val URL_BASE = "https://listar-promociones-819994103285.us-central1.run.app/"
    /** N√∫mero m√°ximo de reintentos para una solicitud de p√°gina fallida. */
    private const val MAX_REINTENTOS = 3

    /**
     * Instancia [Retrofit] configurada con [URL_BASE] y [GsonConverterFactory].
     * Se inicializa de forma perezosa (lazy).
     */
    private val retrofit: Retrofit by lazy {
        println("üîÑ Configurando Retrofit con URL: $URL_BASE")
        Retrofit.Builder()
            .baseUrl(URL_BASE)
            .addConverterFactory(GsonConverterFactory.create())
            .build()
    }

    /**
     * Instancia de la [PromocionJovenAPI] (servicio de Retrofit) creada a partir de [retrofit].
     * Se inicializa de forma perezosa (lazy).
     */
    private val servicio: PromocionJovenAPI by lazy {
        println("üîÑ Creando servicio API")
        retrofit.create(PromocionJovenAPI::class.java)
    }

    /**
     * Obtiene la lista *completa* de promociones para j√≥venes,
     * manejando autom√°ticamente la paginaci√≥n y los reintentos.
     *
     * Llama a [descargarTodasLasPaginas] y proporciona un try-catch global.
     *
     * @return Una [List] de [PromocionJoven]. Retorna una lista vac√≠a si
     * la descarga completa falla por cualquier excepci√≥n.
     */
    suspend fun obtenerPromociones(): List<PromocionJoven> {
        println("üîÑ Iniciando obtenci√≥n de promociones")
        return try {
            val resultado = descargarTodasLasPaginas()
            println("‚úÖ Obtenci√≥n completada: ${resultado.size} promociones")
            resultado
        } catch (e: Exception) {
            println("‚ùå Error en obtenerPromociones: ${e.message}")
            e.printStackTrace()
            emptyList()
        }
    }

    /**
     * Funci√≥n privada que implementa el bucle de paginaci√≥n.
     *
     * Comienza en la p√°gina 1 y contin√∫a solicitando p√°ginas
     * (usando [obtenerPaginaConReintentos]) mientras la respuesta
     * indique que [Pagination.has_next] es verdadero.
     *
     * Agrega los resultados de cada p√°gina a una lista mutable.
     *
     * @return La lista [List] de [PromocionJoven] acumulada de todas las p√°ginas.
     * @throws Exception Si [obtenerPaginaConReintentos] falla definitivamente.
     */
    private suspend fun descargarTodasLasPaginas(): List<PromocionJoven> {
        println("üîÑ Iniciando descarga de p√°ginas")
        val todasLasPromociones = mutableListOf<PromocionJoven>()
        var paginaActual = 1
        var tieneMasPaginas = true

        while (tieneMasPaginas) {
            try {
                println("üìÑ Descargando p√°gina $paginaActual")
                val response = obtenerPaginaConReintentos(paginaActual, 50)

                println("üìÑ P√°gina $paginaActual - Datos recibidos: ${response.data.size} items")
                println("üìÑ Paginaci√≥n - has_next: ${response.pagination.has_next}")

                if (response.data.isNotEmpty()) {
                    todasLasPromociones.addAll(response.data)
                    println("üìÑ Total acumulado: ${todasLasPromociones.size}")
                }

                tieneMasPaginas = response.pagination.has_next
                paginaActual++

                if (tieneMasPaginas) {
                    delay(50L) // Peque√±a pausa entre solicitudes exitosas
                }

            } catch (e: Exception) {
                // Manejo de error en el bucle de paginaci√≥n
                println("‚ùå Error en p√°gina $paginaActual: ${e.message}")
                paginaActual++
                // L√≠mite de seguridad para evitar bucles infinitos en caso de error persistente
                tieneMasPaginas = paginaActual < 10
                delay(1000L) // Pausa m√°s larga antes de intentar la siguiente p√°gina
            }
        }

        println("‚úÖ Descarga completada: ${todasLasPromociones.size} promociones totales")
        return todasLasPromociones
    }

    /**
     * Intenta obtener una p√°gina espec√≠fica del servicio API,
     * reintentando en caso de fallo.
     *
     * Realiza hasta [reintentos] intentos. Si un intento falla,
     * espera un tiempo (delay) que aumenta con cada intento.
     *
     * @param pagina El n√∫mero de p√°gina a solicitar.
     * @param limite El tama√±o de la p√°gina (cantidad de √≠tems).
     * @param reintentos El n√∫mero m√°ximo de intentos a realizar (default: [MAX_REINTENTOS]).
     * @return El [PromocionesJovenResponse] si la solicitud es exitosa.
     * @throws Exception Lanza la √∫ltima excepci√≥n capturada si todos
     * los [reintentos] fallan.
     */
    private suspend fun obtenerPaginaConReintentos(
        pagina: Int,
        limite: Int,
        reintentos: Int = MAX_REINTENTOS
    ): PromocionesJovenResponse {
        println("üîÑ Obteniendo p√°gina $pagina (reintentos: $reintentos)")
        var ultimoError: Exception? = null

        repeat(reintentos) { intento ->
            try {
                println("üîÑ Intento ${intento + 1} para p√°gina $pagina")
                val response = servicio.obtenerPromociones(pagina, limite)
                println("‚úÖ P√°gina $pagina obtenida exitosamente")
                return response // √âxito, retorna la respuesta
            } catch (e: Exception) {
                println("‚ùå Intento ${intento + 1} fall√≥: ${e.message}")
                ultimoError = e
                if (intento < reintentos - 1) {
                    // Backoff simple: 1s, 2s, 3s...
                    val delayMs = 1000L * (intento + 1)
                    println("‚è≥ Esperando $delayMs ms antes de reintentar...")
                    delay(delayMs)
                }
            }
        }

        println("‚ùå Todos los reintentos fallaron para p√°gina $pagina")
        // Si todos los reintentos fallan, lanza la √∫ltima excepci√≥n capturada
        throw ultimoError ?: Exception("Error desconocido al obtener p√°gina $pagina")
    }
}